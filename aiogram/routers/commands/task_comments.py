import json

import httpx
import requests
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from .user_tasks import get_comment

from keyboards.common_keyboards import ButtonTextTask, get_on_task_kb, get_on_start_kb, get_on_comm_kb, \
    ButtonTextComment, ButtonAction

router = Router(name=__name__)

class Comments(StatesGroup):
    task_id = State()
    content = State()

class DeleteCommentState(StatesGroup):
    waiting_for_comment_id = State()
    waiting_for_change_comment_id = State()
    waiting_for_new_comment_text = State()

@router.message(F.text == ButtonTextTask.CONTROL)
async def handle_create_comments(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=get_on_comm_kb())

@router.message(F.text == ButtonAction.BACK)
async def handle_back(message: types.Message):
    await message.answer('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=get_on_task_kb())


@router.message(F.text == ButtonTextComment.CREATE)
async def write_task_id(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    await state.set_state(Comments.task_id)


@router.message(Comments.task_id)
async def write_comments(message: types.Message, state: FSMContext):
    await state.update_data(task_id=message.text)
    data = await state.get_data()
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ —Å ID {data.get('task_id')}")
    await state.set_state(Comments.content)


@router.message(Comments.content)
async def create_process_comment(message: types.Message, state: FSMContext):
    await state.update_data(content=message.text)
    comment_data = await state.get_data()
    async with httpx.AsyncClient() as client:
        response = await client.post("http://api_comment:8002/api/v1/aiogram/comments/", json=comment_data)
    if response.status_code == 200:
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",reply_markup=get_on_task_kb())
    elif response.status_code == 400:
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",reply_markup=get_on_comm_kb())
    elif response.status_code == 404:
        await message.answer("–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=get_on_comm_kb())
    await state.clear()


@router.message(F.text == ButtonTextComment.DELETE)
async def delete_comment(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    await state.set_state(DeleteCommentState.waiting_for_comment_id)


@router.message(DeleteCommentState.waiting_for_comment_id)
async def process_task_id(message: types.Message, state: FSMContext):
    task_id = message.text
    async with httpx.AsyncClient() as client:
        response = await client.delete(f'http://api_comment:8002/api/v1/aiogram/delete/comments/{task_id}/')
    if response.status_code == 200:
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=get_on_task_kb())
    elif response.status_code == 404:
        await message.answer(f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–∞–Ω–Ω–æ–º—É {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_on_task_kb())
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=get_on_task_kb())

    await state.clear()


@router.message(F.text == ButtonTextComment.CHANGE)
async def handle_change_comment(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    await state.set_state(DeleteCommentState.waiting_for_change_comment_id)


@router.message(DeleteCommentState.waiting_for_change_comment_id)
async def change_comment_content(message: types.Message, state: FSMContext):
    task_id = message.text
    comments = await get_comment(task_id)
    if not comments:
        await message.answer(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –Ω–µ—Ç.", reply_markup=get_on_comm_kb())
        await state.clear()
        return

    await state.update_data(task_id=task_id)
    await message.answer(f"–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: üìù{comments[0]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
    await state.set_state(DeleteCommentState.waiting_for_new_comment_text)

@router.message(DeleteCommentState.waiting_for_new_comment_text)
async def update_comment(message: types.Message, state: FSMContext):
    new_content = message.text
    user_data = await state.get_data()
    task_id = user_data.get("task_id")

    payload = {
        "task_id": task_id,
        "content": new_content
    }

    async with httpx.AsyncClient() as client:
        response = await client.put(
            f"http://api_comment:8002/api/v1/aiogram/comments/{task_id}/",
            json=payload
        )

    if response.status_code == 200:
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_on_task_kb())
    elif response.status_code == 404:
        await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.",reply_markup=get_on_comm_kb())
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.",reply_markup=get_on_comm_kb())

    await state.clear()
