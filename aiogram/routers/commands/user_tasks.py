import json

import httpx
import requests
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from datetime import datetime

from keyboards.common_keyboards import ButtonTextTask, get_on_task_kb, get_on_start_kb

router = Router(name=__name__)

class DeleteTaskState(StatesGroup):
    waiting_for_task_id = State()

class TaskCreation(StatesGroup):
    title = State()
    description = State()
    due_date = State()
    category = State()

async def get_comment(task_id: str):
    async with httpx.AsyncClient() as client:
        response = await client.get(f"http://api_comment:8002/api/v1/aiogram/view/comments/{task_id}/")
        response_json = response.json()
        print(response_json.get('contents'))
        return response_json.get("contents")


def format_date(date_string):
    parsed_date = datetime.fromisoformat(date_string)
    return parsed_date.strftime("%d.%m.%Y %H:%M")


@router.message(F.text == ButtonTextTask.CREATE)
async def handle_create_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskCreation.title)


@router.message(TaskCreation.title)
async def process_task_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskCreation.description)


@router.message(TaskCreation.description)
async def process_task_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    await state.set_state(TaskCreation.due_date)


@router.message(TaskCreation.due_date)
async def process_task_due_date(message: types.Message, state: FSMContext):
    await state.update_data(due_date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskCreation.category)


@router.message(TaskCreation.category)
async def process_task_category(message: types.Message, state: FSMContext):
    await state.update_data(category={"name": message.text})
    task_data = await state.get_data()
    task_data['user'] = message.from_user.username
    json_data = json.dumps(task_data, indent=4)
    print(json_data)
    async with httpx.AsyncClient() as client:
        response = await client.post('http://api:8001/api/v1/create/', json=task_data)
    if response.status_code == 201:
        await message.answer("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=get_on_task_kb())
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=get_on_task_kb())
    await state.clear()


@router.message(F.text == ButtonTextTask.VIEW)
async def views_tasks(message: types.Message):
    async with httpx.AsyncClient() as client:
        response = await client.get(f'http://api:8001/api/v1/task/{message.from_user.username}')
    if response.status_code == 500:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–¥–∞—á, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ",
            reply_markup=get_on_start_kb()
        )
        return

    try:
        tasks = response.json()
    except requests.exceptions.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–¥–∞—á")
        return

    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    formatted_tasks = []
    for task in tasks:
        comments = await get_comment(task['id'])
        formatted_task = (
            f"üÜî **ID**: {task['id']}\n"
            f"üìå **–ó–∞–¥–∞—á–∞**: {task['title']}\n"
            f"üìñ **–û–ø–∏—Å–∞–Ω–∏–µ**: {task['description']}\n"
            f"üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**: {format_date(task['created_at'])}\n"
            f"üìÖ **–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è**: {format_date(task['due_date'])}\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏**: {task['category']['name']}\n"
            f"üìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏**: {', '.join(comments) if comments else '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}\n"
        )
        formatted_tasks.append(formatted_task)
    await message.answer("\n\n".join(formatted_tasks))



@router.message(F.text == ButtonTextTask.DELETE)
async def delete_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
    await state.set_state(DeleteTaskState.waiting_for_task_id)


@router.message(DeleteTaskState.waiting_for_task_id)
async def process_task_id(message: types.Message, state: FSMContext):
    task_id = message.text
    async with httpx.AsyncClient() as client:
        response = await client.delete(f'http://api:8001/api/v1/delete/{task_id}/')

    if response.status_code == 204:
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",reply_markup=get_on_task_kb())
    elif response.status_code == 404:
        await message.answer("‚ùå –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",reply_markup=get_on_task_kb())
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",reply_markup=get_on_task_kb())

    await state.clear()